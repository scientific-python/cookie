[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[project]
name = "sp_repo_review"
authors = [
  { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
description = "Review repos for compliance to the Scientific-Python development guidelines"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Environment :: WebAssembly :: Emscripten",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Typing :: Typed",
]
dynamic = ["version", "readme"]
dependencies = [
  "pyyaml",
  "repo-review",
]

[project.optional-dependencies]
cli = [
  "repo-review[cli]",
]
test = [
  "pytest >=7",
]
dev = [
  "pytest >=7",
]

[project.urls]
Guide = "https://learn.scientific-python.org/development"
Homepage = "https://github.com/scientific-python/cookie"
Preview = "https://scientific-python-cookie.readthedocs.io"
Source = "https://github.com/scientific-python/cookie"


[project.entry-points."pipx.run"]
sp-repo-review = "repo_review.__main__:main"

[project.entry-points."repo_review.checks"]
general = "sp_repo_review.checks.general:repo_review_checks"
pyproject = "sp_repo_review.checks.pyproject:repo_review_checks"
precommit = "sp_repo_review.checks.precommit:repo_review_checks"
ruff = "sp_repo_review.checks.ruff:repo_review_checks"
mypy = "sp_repo_review.checks.mypy:repo_review_checks"
github = "sp_repo_review.checks.github:repo_review_checks"
readthedocs = "sp_repo_review.checks.readthedocs:repo_review_checks"

[project.entry-points."repo_review.fixtures"]
workflows = "sp_repo_review.checks.github:workflows"
dependabot = "sp_repo_review.checks.github:dependabot"
precommit = "sp_repo_review.checks.precommit:precommit"
readthedocs = "sp_repo_review.checks.readthedocs:readthedocs"
ruff = "sp_repo_review.checks.ruff:ruff"

[project.entry-points."repo_review.families"]
scikit-hep = "sp_repo_review.families:get_families"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/sp_repo_review/_version.py"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- sp-repo-review -->"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
  'error',
]
norecursedirs = ['{{cookiecutter.project_name}}']
testpaths = ["tests"]


[tool.mypy]
mypy_path = ["src"]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "sp_repo_review.*"
disallow_untyped_defs = true


[tool.pylint]
master.py-version = "3.10"
master.ignore-paths= ["src/sp_repo_review/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "wrong-import-position",
  "redefined-builtin",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "invalid-name",
  "redefined-outer-name",
  "no-member",  # better handled by mypy, etc.
]


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "TID251",      # flake8-tidy-imports.banned-api
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "PLR",    # Design related pylint codes
  "PT004",  # Incorrect check, usefixtures is the correct way to do this
  "RUF012", # Would require a lot of ClassVar's
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"importlib.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."
"importlib.resources.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."

[tool.ruff.lint.per-file-ignores]
"src/sp_repo_review/_compat/**.py" = ["TID251"]

[tool.repo-review]
ignore = ["RTD103"]
