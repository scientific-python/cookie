{%- set compiled = cookiecutter.project_type in ["pybind11", "maturin", "skbuild", "mesonpy"] -%}
name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - main
      - develop
  {%- if not compiled %}
  release:
    types:
      - published
  {%- endif %}

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  pre-commit:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --hook-stage manual --all-files
      - name: Run PyLint
        run: |
          echo "::add-matcher::$GITHUB_WORKSPACE/.github/matchers/pylint.json"
          pipx run nox -s pylint

  checks:
    name: {% raw %}Check Python ${{ matrix.python-version }} on ${{ matrix.runs-on }}{% endraw %}
    runs-on: {% raw %}${{ matrix.runs-on }}{% endraw %}
    needs: [pre-commit]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.11", "3.12-dev"]
        runs-on: [ubuntu-latest, macos-latest, windows-latest]

        include:
          - python-version: pypy-3.8
            runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}

      {%- if cookiecutter.project_type == "mesonpy" %}
      - name: Activate MSVC for Meson
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      {%- endif %}

      - name: Install package
        run: python -m pip install .[test]

      - name: Test package
        run: >-
          python -m pytest -ra --cov --cov-report=xml --cov-report=term
          --durations=20

      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.1

  {%- if not compiled %}

  dist:
    needs: [pre-commit]
    name: Distribution build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build sdist and wheel
        run: pipx run build

      - uses: actions/upload-artifact@v3
        with:
          path: dist

      {%- if cookiecutter.project_type != "trampolim" %}

      - name: Check products
        run: pipx run twine check dist/*

      {%- endif %}

  publish:
    needs: [dist]
    name: Publish to PyPI
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          # Remember to tell (test-)pypi about this repo before publishing
          # Remove this line to publish to PyPI
          repository-url: https://test.pypi.org/legacy/
          {%- if cookiecutter.project_type == "trampolim" %}
          # Check not supported currently by twine + trampolim
          verify-metadata: false
          {%- endif %}

  {%- endif %}
