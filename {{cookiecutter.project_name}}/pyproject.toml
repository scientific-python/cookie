[build-system]
{%- if cookiecutter.backend == "pdm" %}
requires = ["pdm-backend"]
build-backend = "pdm.backend"
{%- elif cookiecutter.backend == "maturin" %}
requires = ["maturin>=0.15,<2"]
build-backend = "maturin"
{%- elif cookiecutter.backend == "hatch" %}
{%- if cookiecutter.vcs %}
requires = ["hatchling", "hatch-vcs"]
{%- else %}
requires = ["hatchling"]
{%- endif %}
build-backend = "hatchling.build"
{%- elif cookiecutter.backend == "setuptools" %}
{%- if cookiecutter.vcs %}
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
{%- else %}
requires = ["setuptools>=61"]
{%- endif %}
build-backend = "setuptools.build_meta"
{%- elif cookiecutter.backend == "flit" %}
{%- if cookiecutter.vcs %}
requires = ["flit_scm"]
build-backend = "flit_scm:buildapi"
{%- else %}
requires = ["flit_core>=3.4"]
build-backend = "flit_core.buildapi"
{%- endif %}
{%- elif cookiecutter.backend == "pybind11" %}
{%- if cookiecutter.vcs %}
requires = ["setuptools>=61", "setuptools_scm[toml]>=7", "pybind11"]
{%- else %}
requires = ["setuptools>=61", "pybind11"]
{%- endif %}
build-backend = "setuptools.build_meta"
{%- elif cookiecutter.backend == "skbuild"  %}
requires = ["pybind11", "scikit-build-core>=0.10"]
build-backend = "scikit_build_core.build"
{%- elif cookiecutter.backend == "mesonpy" %}
requires = ["meson-python", "pybind11"]
build-backend = "mesonpy"
{%- elif cookiecutter.backend == "poetry" %}
{%- if cookiecutter.vcs %}
requires = ["poetry-core>=2.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
{%- else %}
requires = ["poetry_core>=2.0.0"]
build-backend = "poetry.core.masonry.api"
{%- endif %}
{%- endif %}


[project]
name = "{{ cookiecutter.project_name }}"
{%- if cookiecutter.backend in ['maturin', 'mesonpy'] or not cookiecutter.vcs and cookiecutter.backend in ['setuptools', 'pybind11', 'skbuild', 'poetry'] %}
version = "0.1.0"
{%- endif %}
authors = [
  { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
{%- if cookiecutter.org | lower == "scikit-hep" %}
maintainers = [
  { name = "The Scikit-HEP admins", email = "scikit-hep-admins@googlegroups.com" },
]
{%- endif %}
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
{%- if cookiecutter.backend in ['flit', 'mesonpy'] %}
license.file = "LICENSE"
{%- endif %}
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
{%- if cookiecutter.license == "BSD" %}
  "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "Apache" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "MIT" %}
  "License :: OSI Approved :: MIT License",
{%- endif %}
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
{%- if cookiecutter.backend not in ['maturin', 'mesonpy'] and cookiecutter.vcs or cookiecutter.backend in ['pdm', 'hatch', 'flit'] %}
dynamic = ["version"]
{%- endif %}
dependencies = []

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "{{ cookiecutter.url }}"
"Bug Tracker" = "{{ cookiecutter.url }}/issues"
Discussions = "{{ cookiecutter.url }}/discussions"
Changelog = "{{ cookiecutter.url }}/releases"


{%- if cookiecutter.backend == "skbuild" %}


[tool.scikit-build]
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"
{%- if cookiecutter.vcs %}
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/{{ cookiecutter.__project_slug }}/_version.py"]
{%- endif %}


{%- elif cookiecutter.backend == "maturin" %}


[tool.maturin]
module-name = "{{ cookiecutter.__project_slug }}._core"
python-packages = ["{{ cookiecutter.__project_slug }}"]
python-source = "src"
sdist-generator = "git"  # default is cargo

{%- elif cookiecutter.backend == "hatch" %}


[tool.hatch]
{%- if not cookiecutter.vcs %}
version.path = "src/{{ cookiecutter.__project_slug  }}/__init__.py"
{%- else %}
version.source = "vcs"
build.hooks.vcs.version-file = "src/{{ cookiecutter.__project_slug }}/_version.py"
{%- endif %}

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


{%- elif cookiecutter.backend == "pdm" %}
{%- if cookiecutter.vcs %}


[tool.pdm.version]
source = "scm"
write_to = "{{ cookiecutter.__project_slug }}/_version.py"
write_template = "version = '{}'"

{%- else %}


[tool.pdm.version]
source = "file"
path = "src/{{ cookiecutter.__project_slug }}/__init__.py"

{%- endif %}

[tool.pdm.dev-dependencies]
devtest = ["pytest", "pytest-cov"]

{%- elif cookiecutter.backend == "poetry" %}
{%- if cookiecutter.vcs %}
[tool.poetry]
version = "0.0.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = true
substitution.files = ["src/{{ cookiecutter.__project_slug }}/__init__.py"]
{%- endif %}

[tool.poetry.group.test.dependencies]
pytest = ">= 6"
pytest-cov = ">= 3"
{%- endif %}


{%- if cookiecutter.backend in ["pybind11", "flit", "skbuild", "setuptools"] and cookiecutter.vcs %}


[tool.setuptools_scm]
write_to = "src/{{ cookiecutter.__project_slug }}/_version.py"

{%- endif %}


[tool.uv]
dev-dependencies = [
  "{{ cookiecutter.__project_slug }}[test]",
]


{%- if cookiecutter.__type == "compiled" %}


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
{%- endif %}


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["{{ cookiecutter.__project_slug }}"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "{{ cookiecutter.__project_slug  }}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
{%- if cookiecutter.backend == "poetry" %}
target-version = "py39"
{%- endif %}

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["{{ cookiecutter.__project_slug }}._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
{%- if cookiecutter.__type == "compiled" %}
extension-pkg-allow-list = ["{{ cookiecutter.__project_slug }}._core"]
{%- endif %}
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]
