[build-system]
{%- if cookiecutter.backend == "whey" %}
requires = ["whey>=0.0.17"]
build-backend = "whey"
{%- elif cookiecutter.backend == "pdm" %}
requires = ["pdm-backend"]
build-backend = "pdm.backend"
{%- elif cookiecutter.backend == "maturin" %}
requires = ["maturin>=0.15,<2"]
build-backend = "maturin"
{%- elif cookiecutter.backend == "hatch" %}
{%- if cookiecutter.vcs %}
requires = ["hatchling", "hatch-vcs"]
{%- else %}
requires = ["hatchling"]
{%- endif %}
build-backend = "hatchling.build"
{%- elif cookiecutter.backend == "setuptools621" %}
{%- if cookiecutter.vcs %}
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
{%- else %}
requires = ["setuptools>=61"]
{%- endif %}
build-backend = "setuptools.build_meta"
{%- elif cookiecutter.backend == "flit" %}
{%- if cookiecutter.vcs %}
requires = ["flit_scm"]
build-backend = "flit_scm:buildapi"
{%- else %}
requires = ["flit_core>=3.4"]
build-backend = "flit_core.buildapi"
{%- endif %}
{%- elif cookiecutter.backend == "setuptools" %}
{%- if cookiecutter.vcs %}
requires = ["setuptools>=42", "setuptools_scm[toml]>=3.4"]
{%- else %}
requires = ["setuptools>=42"]
{%- endif %}
build-backend = "setuptools.build_meta"
{%- elif cookiecutter.backend == "pybind11" %}
{%- if cookiecutter.vcs %}
requires = ["setuptools>=42", "setuptools_scm[toml]>=3.4", "pybind11"]
{%- else %}
requires = ["setuptools>=42", "pybind11"]
{%- endif %}
build-backend = "setuptools.build_meta"
{%- elif cookiecutter.backend == "skbuild"  %}
requires = ["pybind11", "scikit-build-core"]
build-backend = "scikit_build_core.build"
{%- elif cookiecutter.backend == "mesonpy" %}
requires = ["meson-python", "pybind11"]
build-backend = "mesonpy"
{%- elif cookiecutter.backend == "poetry" %}
{%- if cookiecutter.vcs %}
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
{%- else %}
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{%- endif %}
{%- endif %}

{%- if cookiecutter.backend in ["setuptools", "pybind11"] %}


[tool.check-manifest]
ignore = [
  ".github/**",
  "docs/**",
  ".pre-commit-config.yaml",
  ".readthedocs.yaml",
  "src/*/_version.py",
  "noxfile.py",
]

{%- elif cookiecutter.backend == "poetry" %}


[tool.poetry]
name = "{{ cookiecutter.project_name }}"
{%- if cookiecutter.vcs %}
version = "0.0.0"
{%- else %}
version = "0.1.0"
{%- endif %}
authors = [
  "{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>",
]
{%- if cookiecutter.org == "scikit-hep" %}
maintainers = [
  "The Scikit-HEP admins <scikit-hep-admins@googlegroups.com>",
]
{%- endif %}
homepage = "{{ cookiecutter.url }}"
repository = "{{ cookiecutter.url }}"
{%- if cookiecutter.license == "BSD" %}
license = "BSD-3-Clause"
{%- elif cookiecutter.license == "Apache" %}
license = "Apache-2.0"
{%- elif cookiecutter.license == "MIT" %}
license = "MIT"
{%- endif %}
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"

classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.8"

furo = { version = ">=2023.08.17", optional = true }
myst_parser = { version = ">=0.13", optional = true }
pytest = { version = ">=6", optional = true }
pytest-cov = { version = ">=3", optional = true }
sphinx = { version = ">=7.0", optional = true }
sphinx_copybutton = { version = ">=0.3.0", optional = true }
sphinx-autodoc-typehints = { version = "*", optional = true }

[tool.poetry.dev-dependencies]
pytest = ">= 6"
pytest-cov = ">= 3"

[tool.poetry.extras]
test = ["pytest", "pytest-cov"]
dev = ["pytest", "pytest-cov"]
docs = [
  "furo",
  "myst_parser",
  "sphinx",
  "sphinx_autodoc_typehints",
  "sphinx_copybutton",
]

{%- if cookiecutter.vcs %}

[tool.poetry-dynamic-versioning]
enable = true
substitution.files = ["src/{{ cookiecutter.__project_slug }}/__init__.py"]
{%- endif %}
{%- else %}


[project]
name = "{{ cookiecutter.project_name }}"
{%- if cookiecutter.backend in ['maturin', 'mesonpy', 'whey'] or not cookiecutter.vcs and cookiecutter.backend in ['setuptools621', 'skbuild'] %}
version = "0.1.0"
{%- endif %}
authors = [
  { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
{%- if cookiecutter.org | lower == "scikit-hep" %}
maintainers = [
  { name = "The Scikit-HEP admins", email = "scikit-hep-admins@googlegroups.com" },
]
{%- endif %}
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
{%- if cookiecutter.license == "BSD" %}
  "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "Apache" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "MIT" %}
  "License :: OSI Approved :: MIT License",
{%- endif %}
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
{%- if cookiecutter.backend not in ['maturin', 'mesonpy', 'whey'] and cookiecutter.vcs or cookiecutter.backend in ['pdm', 'hatch', 'flit'] %}
dynamic = ["version"]
{%- endif %}
dependencies = []

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "{{ cookiecutter.url }}"
"Bug Tracker" = "{{ cookiecutter.url }}/issues"
Discussions = "{{ cookiecutter.url }}/discussions"
Changelog = "{{ cookiecutter.url }}/releases"
{%- endif %}


{%- if cookiecutter.backend == "skbuild" %}


[tool.scikit-build]
minimum-version = "0.4"
build-dir = "build/{wheel_tag}"
{%- if cookiecutter.vcs %}
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/{{ cookiecutter.__project_slug }}/_version.py"]
{%- endif %}


{%- elif cookiecutter.backend == "whey" %}


[tool.whey]
source-dir = "src"

{%- elif cookiecutter.backend == "maturin" %}


[tool.maturin]
module-name = "{{ cookiecutter.__project_slug }}._core"
python-packages = ["{{ cookiecutter.__project_slug }}"]
python-source = "src"
sdist-generator = "git"  # default is cargo

{%- elif cookiecutter.backend == "hatch" %}


[tool.hatch]
{%- if not cookiecutter.vcs %}
version.path = "src/{{ cookiecutter.__project_slug  }}/__init__.py"
{%- else %}
version.source = "vcs"
build.hooks.vcs.version-file = "src/{{ cookiecutter.__project_slug }}/_version.py"
{%- endif %}
envs.default.dependencies = [
  "pytest",
  "pytest-cov",
]

{%- elif cookiecutter.backend == "pdm" %}
{%- if cookiecutter.vcs %}


[tool.pdm.version]
source = "scm"
write_to = "{{ cookiecutter.__project_slug }}/_version.py"
write_template = "version = '{}'"

{%- else %}


[tool.pdm.version]
source = "file"
path = "src/{{ cookiecutter.__project_slug }}/__init__.py"

{%- endif %}

[tool.pdm.dev-dependencies]
devtest = ["pytest", "pytest-cov"]

{%- endif %}

{%- if cookiecutter.backend in ["setuptools", "pybind11", "poetry", "flit", "skbuild", "setuptools621"] and cookiecutter.vcs %}


[tool.setuptools_scm]
write_to = "src/{{ cookiecutter.__project_slug }}/_version.py"
{%- endif %}


{%- if cookiecutter.__type == "compiled" %}


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
test-skip = ["*universal2:arm64"]
{%- endif %}


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["{{ cookiecutter.__project_slug }}"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "{{ cookiecutter.__project_slug  }}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
]
{%- if cookiecutter.backend in ["setuptools", "pybind11", "poetry"] %}
target-version = "py38"
{%- endif %}
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["{{ cookiecutter.__project_slug }}._compat.typing"]

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
{%- if cookiecutter.__type == "compiled" %}
extension-pkg-allow-list = ["{{ cookiecutter.__project_slug }}._core"]
{%- endif %}
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]
